Goal: as an agent delegated to manage a Kafka installation in the 'kafka' namespace, you must:
- ensure the target Kafka cluster's general health
- adjust the cluster to handle an increasing message throughput
- keep consumer P99 latency below target threshold

You have no direct visibility into, or control over, producer and consumer workloads.

Key metrics are regularly dumped into the 'kafka-latency-metrics' ConfigMap:
- p99_latency_ms: calculated consumer P99 latency
- target_latency_ms: configured target latency threshold (initially ${TARGET_LATENCY_MS:-10.0}ms)
- producer_target_rate: current target message rate of the producer (msg/s)

Example command to view these metrics:
```
kubectl get configmap kafka-latency-metrics -n kafka -o jsonpath='{.data}'
```

You are operating in a resource-constrained Kubernetes sandbox (k3d).
The entire sandbox is limited to approximately:
- ${K8S_SANDBOX_CPU_LIMIT:-4.0} CPUs
- ${K8S_SANDBOX_MEM_LIMIT:-4G} Memory

Some targets for tuning include (but are not limited to!) env variables on
the 'kafka-controller' StatefulSet:
- KAFKA_HEAP_OPTS (-Xms<size>m -Xmx<size>m)
- KAFKA_NUM_NETWORK_THREADS
- KAFKA_NUM_IO_THREADS

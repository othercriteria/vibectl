services:
  k8s-sandbox:
    container_name: kafka-k8s-sandbox
    deploy: # Add resource limits
      resources:
        limits:
          cpus: "${K8S_SANDBOX_CPU_LIMIT:-4.0}"
          memory: "${K8S_SANDBOX_MEM_LIMIT:-8G}"
    build:
      context: ./k8s-sandbox
      dockerfile: Dockerfile
      args:
        # Pass the host's Docker GID for k3d permissions
        DOCKER_GID: ${DOCKER_GID:-999}
    privileged: true # Needed for running k3d
    environment:
      # API keys (Add VIBECTL_ANTHROPIC_API_KEY handling in run.sh)
      - VIBECTL_ANTHROPIC_API_KEY=${VIBECTL_ANTHROPIC_API_KEY}
      - ANTHROPIC_API_KEY=${VIBECTL_ANTHROPIC_API_KEY} # Legacy fallback
      - VIBECTL_MODEL=${VIBECTL_MODEL:-claude-3.7-sonnet}
      - VIBECTL_VERBOSE=${VIBECTL_VERBOSE:-false}
      - STATUS_DIR=/tmp/status
      - K3D_CLUSTER_NAME=kafka-demo-cluster
      - GENERATED_KAFKA_CLUSTER_ID=${GENERATED_KAFKA_CLUSTER_ID}
      - K8S_SANDBOX_CPU_LIMIT=${K8S_SANDBOX_CPU_LIMIT:-4.0}
      - K8S_SANDBOX_MEM_LIMIT=${K8S_SANDBOX_MEM_LIMIT:-8G}
      - KAFKA_ADVERTISED_HOST=172.20.0.2
      - TARGET_LATENCY_MS=${TARGET_LATENCY_MS:-5.0}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - ./status-volume:/tmp/status:rw
      - ../../../:/home/sandbox/vibectl-src:ro
      - ./k8s-sandbox/port_forward_manager.py:/home/sandbox/port_forward_manager.py:ro
      - ./k8s-sandbox/entrypoint.sh:/usr/local/bin/entrypoint.sh:ro
      - ./k8s-sandbox/latency-reporter.py:/home/sandbox/latency-reporter.py:ro
      - ./k8s-sandbox/vibectl_instructions.txt:/home/sandbox/vibectl_instructions.txt:ro
      - ./k8s-sandbox/manifests:/home/sandbox/manifests:ro
    networks:
      kafka-demo-network:
        aliases:
          - k8s-sandbox
    healthcheck:
      test: ["CMD-SHELL", "test -f /tmp/status/kafka_ready || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 90s

  producer:
    container_name: kafka-producer
    build:
      context: ./producer
      dockerfile: Dockerfile
    depends_on:
      k8s-sandbox:
        condition: service_healthy
        restart: true
    environment:
      - KAFKA_BROKER=k8s-sandbox:9092
      - STATUS_DIR=/tmp/status
      - MESSAGE_RATE_PER_SECOND=${INITIAL_PRODUCER_RATE:-10000}
      - TARGET_RATE_MARGIN=${TARGET_RATE_MARGIN:-0.98}
      - TARGET_RATE_MULT=${TARGET_RATE_MULT:-1.1}
      - TARGET_LATENCY_MS=${TARGET_LATENCY_MS:-5.0}
      - KAFKA_TOPIC=${KAFKA_TOPIC:-throughput-topic}
      - MESSAGE_SIZE_BYTES=${MESSAGE_SIZE_BYTES:-1024}
      - PRODUCER_CLIENT_ID=${PRODUCER_CLIENT_ID:-kafka-throughput-producer}
      - MAX_RETRIES=${MAX_RETRIES:-30}
      - INITIAL_RETRY_DELAY_S=${INITIAL_RETRY_DELAY_S:-5}
      - MAX_MESSAGE_RATE=${MAX_MESSAGE_RATE:-150000}
      - PARTITION_SKEW=${PARTITION_SKEW:-0.2}
    volumes:
      - ./status-volume:/tmp/status:rw
    networks:
      kafka-demo-network:
        aliases:
          - kafka-producer
    # Simple process check - verify the producer binary is running
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f /producer || pgrep -f ./producer"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s

  consumer:
    container_name: kafka-consumer
    build:
      context: ./consumer
      dockerfile: Dockerfile
    depends_on:
      k8s-sandbox:
        condition: service_healthy
        restart: true
    environment:
      - KAFKA_BROKER=k8s-sandbox:9092
    networks:
      kafka-demo-network:
        aliases:
          - kafka-consumer
    # Simple process check - verify the consumer binary is running
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f /consumer || pgrep -f ./consumer"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s

  kafka-demo-ui:
    container_name: kafka-demo-ui
    build:
      context: ./kafka-demo-ui
      dockerfile: Dockerfile
      args:
        DOCKER_GID: ${DOCKER_GID:-999}
    ports:
      - "8081:8081"
    environment:
      - STATUS_DIR=/tmp/status
      - KUBECONFIG=/root/.kube/config
      - DOCKER_GID=${DOCKER_GID:-999}
    volumes:
      - ./status-volume:/tmp/status:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      kafka-demo-network:
        aliases:
          - kafka-demo-ui
    # Healthcheck: Check if Flask app is responding
    healthcheck:
      # Check if the Flask app is serving HTTP requests
      test: ["CMD", "curl", "-f", "http://localhost:8081/"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 15s # Allow time for Flask app to start

  kminion: # New KMinion service
    image: redpandadata/kminion:latest
    container_name: kafka-kminion
    restart: unless-stopped
    networks:
      - kafka-demo-network
    ports:
      - "8088:8080" # Expose KMinion's web UI/metrics port (8080) to host 8088
    environment:
      LOGGER_LEVEL: "info"
      KAFKA_BROKERS: "k8s-sandbox:9092"
      MINION_ENDTOEND_ENABLED: "true"
      MINION_CONSUMERGROUPS_SCRAPEMODE: "offsetsTopic"
    depends_on:
      k8s-sandbox: # KMinion needs Kafka to be ready, which is inside k8s-sandbox
        condition: service_healthy # Wait for k8s-sandbox (and its internal Kafka port-forward) to be ready

networks:
  kafka-demo-network:
    driver: bridge
    # Add DNS configuration for better hostname resolution
    driver_opts:
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.enable_icc: "true"

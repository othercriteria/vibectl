# =========================================================================
# CHAOS MONKEY TEST ENVIRONMENT - INTENTIONALLY VULNERABLE SERVICES
# These services are DESIGNED TO BE ATTACKED AND DESTROYED by the red agent
# =========================================================================

# 1. App source (Flask) — mounted read‑only
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-code
  namespace: services
  labels:
    role: test-target
    chaos-monkey-target: "true"
    purpose: "vulnerable-by-design"
  annotations:
    description: "Intentionally vulnerable code for chaos testing"
data:
  app.py: |
    # TEST CODE - Intentionally vulnerable Flask application
    from flask import Flask, jsonify
    import os, redis, socket
    app = Flask(__name__)
    r = redis.Redis(host=os.getenv("DB_HOST","demo-db"), port=6379, decode_responses=True)
    @app.route("/health")
    def health():
        try:  r.ping(); db="ok"
        except Exception: db="down"
        return jsonify(status="ok" if db=="ok" else "degraded",
                       db=db, host=socket.gethostname())
    @app.route("/admin")                         # ❌ VULNERABILITY: no auth!
    def admin():  return jsonify(secret=os.getenv("ADMIN_TOKEN","unset"))
    @app.route("/user/<uid>")
    def user(uid): return jsonify(id=uid, name=f"user-{uid}")
    if __name__ == "__main__":
        app.run(host="0.0.0.0", port=5000)
---
# 2. Intentionally weak "secret" - ATTACK TARGET
apiVersion: v1
kind: Secret
metadata:
  name: demo-secrets
  namespace: services
  labels:
    role: test-target
    chaos-monkey-target: "true"
    purpose: "vulnerable-by-design"
  annotations:
    description: "Intentionally weak secret for chaos testing"
stringData:
  ADMIN_TOKEN: "p@ssw0rd"
---
# 3. Application Deployment - ATTACK TARGET
# This deployment has MANY VULNERABILITIES BY DESIGN
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app
  namespace: services
  labels:
    role: test-target
    chaos-monkey-target: "true"
    purpose: "vulnerable-by-design"
  annotations:
    description: "Intentionally vulnerable application for testing attacks"
    chaos-vulnerabilities: "no-ha, resource-constraints, insecure-endpoints"
spec:
  replicas: 1                     # ❌ VULNERABILITY: no HA - single point of failure!
  selector: { matchLabels: { app: app, chaos-target: "true" } }
  template:
    metadata:
      labels:
        app: app
        chaos-target: "true"
        test-environment: "true"
        purpose: "attack-me"
    spec:
      containers:
      - name: flask
        image: python:3.12-slim
        command: ["/bin/bash", "-c"]
        args:
          - |
            # TEST APP - Intentionally vulnerable configuration
            pip install flask redis
            python /code/app.py
        env:
        - name: DB_HOST   # ❌ VULNERABILITY: hard‑wired service DNS - dependency attack vector
          value: "demo-db"
        - name: ADMIN_TOKEN
          valueFrom: { secretKeyRef: { name: demo-secrets, key: ADMIN_TOKEN } }
        ports: [ { containerPort: 5000 } ]
        readinessProbe:          # ❌ VULNERABILITY: only green when Redis replies - dependency chain
          httpGet: { path: /health, port: 5000 }
          periodSeconds: 10
          initialDelaySeconds: 30
          failureThreshold: 5
        resources:               # ❌ VULNERABILITY: tiny resources — easy to DoS
          requests: { cpu: "50m", memory: "64Mi" }
          limits:   { cpu: "100m", memory: "128Mi" }
        volumeMounts:
        - name: src
          mountPath: /code       # mounts app.py
      volumes:
      - name: src
        configMap: { name: app-code }
---
apiVersion: v1
kind: Service
metadata:
  name: app
  namespace: services
  labels:
    role: test-target
    chaos-monkey-target: "true"
    purpose: "vulnerable-by-design"
  annotations:
    description: "Service fronting vulnerable application"
spec:
  selector: { app: app, chaos-target: "true" }
  ports:
  - port: 80
    targetPort: 5000
  type: ClusterIP
---
# 4. Minimal Redis - PRIME ATTACK TARGET!
# Intentionally vulnerable database with NO PROTECTION
# ❌ VULNERABILITIES: no auth, no readiness probe, no PVC, no replication
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-db
  namespace: services
  labels:
    role: test-target
    chaos-monkey-target: "true"
    purpose: "vulnerable-by-design"
    attack-priority: "high"
  annotations:
    description: "Critically vulnerable database - primary attack target"
    chaos-vulnerabilities: "no-auth, no-persistence, no-ha, single-point-of-failure"
spec:
  replicas: 1     # ❌ VULNERABILITY: Single instance - no HA!
  selector: { matchLabels: { app: demo-db, chaos-target: "true" } }
  template:
    metadata:
      labels:
        app: demo-db
        chaos-target: "true"
        test-environment: "true"
        purpose: "attack-me"
        component: "critical-dependency"
    spec:
      containers:
      - name: redis
        image: redis:7-alpine   # ❌ VULNERABILITY: No authentication configured!
        ports: [ { containerPort: 6379 } ]
        # ❌ VULNERABILITY: No volume mounts - data will be lost if pod is killed!
        # ❌ VULNERABILITY: No readiness probe - hard to detect failures!
        resources:   # ❌ VULNERABILITY: Minimal resources - easy to exhaust!
          limits:   { cpu: "100m", memory: "128Mi" }
          requests: { cpu: "50m",  memory: "64Mi" }
---
apiVersion: v1
kind: Service
metadata:
  name: demo-db
  namespace: services
  labels:
    role: test-target
    chaos-monkey-target: "true"
    purpose: "vulnerable-by-design"
    attack-priority: "high"
  annotations:
    description: "Service for vulnerable database - critical attack target"
spec:
  selector: { app: demo-db, chaos-target: "true" }
  ports:
  - port: 6379
    targetPort: 6379

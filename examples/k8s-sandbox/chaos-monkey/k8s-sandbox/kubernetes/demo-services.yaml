apiVersion: v1
kind: ConfigMap
metadata:
  name: demo-services-config
  namespace: services
data:
  config.json: |
    {
      "environment": "demo",
      "version": "0.1.0",
      "config": {
        "logLevel": "info",
        "responseTimeout": 5,
        "maxRetries": 3
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: services
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 5
        resources:
          limits:
            memory: "128Mi"
            cpu: "100m"
          requests:
            memory: "64Mi"
            cpu: "50m"
        volumeMounts:
        - name: content
          mountPath: /usr/share/nginx/html
      volumes:
      - name: content
        configMap:
          name: frontend-content
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-content
  namespace: services
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
      <title>Chaos Monkey Demo</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          margin: 40px;
          text-align: center;
        }
        h1 {
          color: #333;
        }
        .status {
          padding: 20px;
          background-color: #f1f1f1;
          border-radius: 5px;
          margin: 20px 0;
        }
      </style>
    </head>
    <body>
      <h1>Service Status: Online</h1>
      <div class="status">
        <p>This service is currently operational.</p>
        <p>Service ID: frontend-v1</p>
        <p>Last updated: <span id="timestamp"></span></p>
      </div>
      <script>
        document.getElementById('timestamp').innerText = new Date().toISOString();
        setInterval(function() {
          document.getElementById('timestamp').innerText = new Date().toISOString();
        }, 1000);
      </script>
    </body>
    </html>
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: services
spec:
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
    nodePort: ${NODE_PORT_1}
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-api
  namespace: services
spec:
  replicas: 1  # Vulnerable: No high availability
  selector:
    matchLabels:
      app: backend-api
  template:
    metadata:
      labels:
        app: backend-api
    spec:
      containers:
      - name: backend
        image: nginx:latest
        ports:
        - containerPort: 80
        resources:
          limits:
            memory: "64Mi"  # Vulnerable: Low memory limit
            cpu: "50m"      # Vulnerable: Low CPU limit
        # Vulnerable: No health checks
---
apiVersion: v1
kind: Service
metadata:
  name: backend-api
  namespace: services
spec:
  selector:
    app: backend-api
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: database
  namespace: services
spec:
  replicas: 1  # Vulnerable: Single instance
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      labels:
        app: database
    spec:
      containers:
      - name: redis
        image: redis:latest
        ports:
        - containerPort: 6379
        resources:
          limits:
            memory: "256Mi"
            cpu: "200m"
          requests:
            memory: "128Mi"
            cpu: "100m"
        # Vulnerable: No persistent storage
---
apiVersion: v1
kind: Service
metadata:
  name: database
  namespace: services
spec:
  selector:
    app: database
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cache
  namespace: services
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cache
  template:
    metadata:
      labels:
        app: cache
    spec:
      # Vulnerable: No security context
      containers:
      - name: memcached
        image: memcached:latest
        ports:
        - containerPort: 11211
        resources:
          limits:
            memory: "128Mi"
            cpu: "100m"
          requests:
            memory: "64Mi"
            cpu: "50m"
---
apiVersion: v1
kind: Service
metadata:
  name: cache
  namespace: services
spec:
  selector:
    app: cache
  ports:
  - port: 11211
    targetPort: 11211
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loadbalancer
  namespace: services
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loadbalancer
  template:
    metadata:
      labels:
        app: loadbalancer
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
        resources:
          limits:
            memory: "128Mi"
            cpu: "100m"
          requests:
            memory: "64Mi"
            cpu: "50m"
---
apiVersion: v1
kind: Service
metadata:
  name: loadbalancer
  namespace: services
spec:
  selector:
    app: loadbalancer
  ports:
  - port: 80
    targetPort: 80
    nodePort: ${NODE_PORT_2}
  type: NodePort
---
# Vulnerable ConfigMap with clear-text secrets
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: services
data:
  database.password: "insecure-db-password"
  api.key: "insecure-api-key-12345"
  admin.password: "admin123"

---
description: Guidelines for managing feature development using Git worktrees
globs: ["**/*"]
alwaysApply: true
---
# Feature Development with Git Worktrees

Use Git worktrees for managing multiple features simultaneously.

<rule>
name: feature_worktrees
description: Guidelines for managing feature development using Git worktrees
filters:
  # Match feature development queries
  - type: content
    pattern: "(?i)\\b(new feature|worktree|branch to work on|feature branch|develop feature)\\b"
  # Match Git branch commands
  - type: content
    pattern: "(?i)\\b(git (checkout|branch|switch)|new branch)\\b"
  # Match development workflow discussions
  - type: intent
    pattern: "development_workflow"

actions:
  - type: suggest
    message: |
      For feature development:
      1. Create a feature branch from main:
         ```
         git checkout -b feature/name-of-feature main
         ```
      2. Add a worktree with project and feature name:
         ```
         # Create worktrees directory if it doesn't exist
         mkdir -p ../worktrees/

         # Get project name from the current directory
         PROJECT_NAME=$(basename $(pwd))

         # Add worktree with project and feature name to avoid collisions
         git worktree add ../worktrees/${PROJECT_NAME}-feature-name feature/name-of-feature
         cd ../worktrees/${PROJECT_NAME}-feature-name
         ```
      3. Set up development environment in the worktree:
         ```
         # Allow direnv in the worktree
         direnv allow

         # Install pre-commit hooks in the worktree using Makefile target
         nix develop --quiet -c make install-pre-commit 2>/dev/null
         ```
      4. Create a minimal PR for visibility early in development:
         ```
         # Make initial commit with planned changes
         touch PLANNED_CHANGES.md
         echo "# Planned Changes\n\n- Feature 1\n- Feature 2" > PLANNED_CHANGES.md
         git add PLANNED_CHANGES.md
         git commit -m "feat: initial commit for feature-name"
         git push -u origin feature/name-of-feature

         # Create the PR using GitHub CLI in the dev shell - suppress Nix output
         nix develop --quiet -c gh pr create --title "WIP: feature-name" --body "Work in progress" --draft 2>/dev/null
         ```
      5. Always do your work in the worktree directory, not the main workspace:
         ```
         # Check which branch you're on before starting work
         git status
         ```
      6. When complete, commit final changes from the worktree:
         ```
         # Run pre-commit checks before committing
         nix develop --quiet -c make lint 2>/dev/null

         # Make necessary fixes and commit
         git add .
         git commit -m "feat: implement feature-name"
         git push

         # Update PR from draft to ready for review - suppress Nix output
         nix develop --quiet -c gh pr ready 2>/dev/null
         ```
      7. Clean up after PR merge completion:
         ```
         # First, get back to main and pull latest changes
         cd ~/workspace/${PROJECT_NAME}
         git checkout main
         git pull

         # Remove the worktree
         git worktree remove ../worktrees/${PROJECT_NAME}-feature-name

         # Delete the local branch
         git branch -d feature/name-of-feature

         # Delete the remote branch (once PR is merged and you're done with it)
         git push origin --delete feature/name-of-feature

         # Clean up references
         git fetch --prune
         ```

  - type: reject
    conditions:
      # Discourage direct work on main
      - pattern: "(?i)\\b(work|develop|implement)\\s+.*\\s+(on|in)\\s+main\\b"
        message: "Avoid developing features directly on main. Use feature branches with worktrees instead."
      # Warn about working in main workspace instead of worktree
      - pattern: "(?i)git\\s+status.*feature.*main"
        message: "You appear to be in the main workspace but working on a feature. Use 'cd ../worktrees/${PROJECT_NAME}-feature-name' to work in the worktree."
      # Warn about not using pre-commit in worktree
      - pattern: "(?i)git\\s+commit.*(?!.*pre-commit|make lint).*worktree"
        message: "Make sure to run pre-commit checks before committing in the worktree: nix develop --quiet -c make lint"

criteria:
  required:
    - Create feature branches with descriptive names (feature/name-of-feature)
    - Use worktrees with project-prefixed directories to avoid collisions
    - Run direnv allow in the worktree
    - Install and run pre-commit hooks in the worktree using Makefile targets
    - Create minimal PR at beginning of feature work
    - Work exclusively in the worktree directory, not the main workspace
    - Run pre-commit checks before committing
    - Keep feature branches focused on single features
    - Clean up worktrees after feature completion
    - Delete both local and remote branches after PR merge
    - Suppress Nix output verbosity with --quiet and redirect stderr to /dev/null

examples:
  - input: "I need to start developing a new feature"
    output: |
      Create a feature branch, worktree, and initial PR:
      ```
      # Create the feature branch
      git checkout -b feature/my-new-feature main

      # Setup worktree with project name
      PROJECT_NAME=$(basename $(pwd))
      git worktree add ../worktrees/${PROJECT_NAME}-my-new-feature feature/my-new-feature
      cd ../worktrees/${PROJECT_NAME}-my-new-feature

      # Setup development environment
      direnv allow
      nix develop --quiet -c make install-pre-commit 2>/dev/null

      # Create initial PR
      touch PLANNED_CHANGES.md
      echo "# Planned Changes\n\n- Add new functionality\n- Update documentation" > PLANNED_CHANGES.md
      git add PLANNED_CHANGES.md
      git commit -m "feat: initial commit for my-new-feature"
      git push -u origin feature/my-new-feature
      nix develop --quiet -c gh pr create --title "WIP: my-new-feature" --body "Work in progress" --draft 2>/dev/null
      ```

  - input: "How do I manage multiple features at once?"
    output: |
      Use separate worktrees for each feature:
      ```
      # Get project name for worktree directories
      PROJECT_NAME=$(basename $(pwd))

      # For feature 1
      git checkout -b feature/feature-one main
      git worktree add ../worktrees/${PROJECT_NAME}-feature-one feature/feature-one
      cd ../worktrees/${PROJECT_NAME}-feature-one
      direnv allow
      nix develop --quiet -c make install-pre-commit 2>/dev/null

      # Create initial PR for feature 1
      touch PLANNED_CHANGES.md
      echo "# Planned Changes for Feature One" > PLANNED_CHANGES.md
      git add PLANNED_CHANGES.md
      git commit -m "feat: initial commit for feature-one"
      git push -u origin feature/feature-one
      nix develop --quiet -c gh pr create --title "WIP: feature-one" --body "Work in progress" --draft 2>/dev/null

      # For feature 2 (from main workspace)
      cd ~/workspace/${PROJECT_NAME}
      git checkout -b feature/feature-two main
      git worktree add ../worktrees/${PROJECT_NAME}-feature-two feature/feature-two
      cd ../worktrees/${PROJECT_NAME}-feature-two
      direnv allow
      nix develop --quiet -c make install-pre-commit 2>/dev/null

      # Create initial PR for feature 2
      touch PLANNED_CHANGES.md
      echo "# Planned Changes for Feature Two" > PLANNED_CHANGES.md
      git add PLANNED_CHANGES.md
      git commit -m "feat: initial commit for feature-two"
      git push -u origin feature/feature-two
      nix develop --quiet -c gh pr create --title "WIP: feature-two" --body "Work in progress" --draft 2>/dev/null

      # Switch between features by changing directories
      cd ../worktrees/${PROJECT_NAME}-feature-one  # Work on feature 1
      cd ../worktrees/${PROJECT_NAME}-feature-two  # Work on feature 2
      ```

  - input: "How do I clean up after my PR is merged?"
    output: |
      Clean up thoroughly after PR merge:
      ```
      # Get project name for paths
      PROJECT_NAME=$(basename $(cd ~/workspace && ls -d */ | grep -v "worktrees" | head -1 | tr -d '/'))

      # First, get back to main and pull latest changes
      cd ~/workspace/${PROJECT_NAME}
      git checkout main
      git pull

      # Remove the worktree
      git worktree remove ../worktrees/${PROJECT_NAME}-feature-name

      # Delete local branch
      git branch -d feature/name-of-feature

      # Delete remote branch
      git push origin --delete feature/name-of-feature

      # Clean up references
      git fetch --prune
      ```

metadata:
  priority: high
  version: 1.5
</rule>

---
description: Guidelines for managing feature development using Git worktrees
globs: ["**/*"]
alwaysApply: true
---
# Feature Development with Git Worktrees

Use Git worktrees for managing multiple features simultaneously, with special considerations for Cursor and other IDEs.

<rule>
name: feature_worktrees
description: Guidelines for managing feature development using Git worktrees
filters:
  # Match feature development queries
  - type: content
    pattern: "(?i)\\b(new feature|worktree|branch to work on|feature branch|develop feature)\\b"
  # Match Git branch commands
  - type: content
    pattern: "(?i)\\b(git (checkout|branch|switch)|new branch)\\b"
  # Match development workflow discussions
  - type: intent
    pattern: "development_workflow"

actions:
  - type: suggest
    message: |
      For feature development:
      1. Create a feature branch from main:
         ```
         # First ensure you're on main
         git checkout main

         # Create the feature branch
         git checkout -b feature/name-of-feature main
         ```

      2. **IMPORTANT**: Add and switch to the worktree BEFORE creating any files:
         ```
         # Create worktrees directory if it doesn't exist
         mkdir -p ../worktrees/

         # Get project name from the current directory
         PROJECT_NAME=$(basename $(pwd))

         # Add worktree with project and feature name to avoid collisions
         git worktree add ../worktrees/${PROJECT_NAME}-feature-name feature/name-of-feature

         # Switch to the worktree directory
         cd ../worktrees/${PROJECT_NAME}-feature-name

         # Verify you're in the correct branch
         git status
         ```

      3. Set up development environment in the worktree:
         ```
         # Allow direnv in the worktree
         direnv allow

         # Install pre-commit hooks in the worktree using Makefile target
         nix develop --quiet -c make install-pre-commit 2>/dev/null
         ```

      4. **IDE-SPECIFIC CONSIDERATIONS**:
         - For Cursor/VS Code: Open a new window pointed directly at the worktree
           ```
           # From the terminal in your worktree directory
           cursor .   # For Cursor
           code .     # For VS Code
           ```
         - **IMPORTANT**: Some IDEs (including Cursor) may have limitations editing files outside the main workspace
         - If you encounter issues, always maintain separate IDE windows for main workspace and worktree
         - Never try to edit worktree files from your main workspace IDE window
         - Keep a terminal open and use command-line tools when needed for cross-worktree operations

      5. Create a minimal PR for visibility early in development:
         ```
         # IMPORTANT: Do this ONLY in a terminal or IDE window that's in the worktree directory
         # Check current directory to be sure you're in the worktree
         pwd
         git status  # Should show your feature branch

         # Make initial commit with planned changes
         touch PLANNED_CHANGES.md
         echo "# Planned Changes\n\n- Feature 1\n- Feature 2" > PLANNED_CHANGES.md

         # Update CHANGELOG.md with planned changes under [Unreleased]
         # First, check the current changelog content to see where to add entries
         grep -A 10 "## \[Unreleased\]" CHANGELOG.md

         # Open the CHANGELOG.md file to add entries under [Unreleased]
         # Add entries in the appropriate section (Added, Changed, Fixed)
         # Example:
         # ## [Unreleased]
         #
         # ### Added
         # - New feature description
         ${EDITOR:-vi} CHANGELOG.md

         # Stage both files
         git add PLANNED_CHANGES.md CHANGELOG.md

         git commit -m "feat: initial commit for feature-name"
         git push -u origin feature/name-of-feature

         # Create the PR using GitHub CLI in the dev shell - suppress Nix output
         nix develop --quiet -c gh pr create --title "WIP: feature-name" --body "Work in progress" --draft 2>/dev/null
         ```

      6. Always do your work in the worktree directory, not the main workspace:
         ```
         # Check which branch you're on before starting work
         git status

         # If you're not in the worktree, switch to it
         cd ../worktrees/${PROJECT_NAME}-feature-name
         ```

      7. When complete, commit final changes from the worktree:
         ```
         # Update CHANGELOG.md with final changes under [Unreleased]
         # Make sure all your feature changes are properly documented
         ${EDITOR:-vi} CHANGELOG.md

         # Run pre-commit checks before committing
         nix develop --quiet -c make lint 2>/dev/null

         # Make necessary fixes and commit
         git add .
         git commit -m "feat: implement feature-name"
         git push

         # Update PR from draft to ready for review - suppress Nix output
         nix develop --quiet -c gh pr ready 2>/dev/null
         ```

      8. Before merging, ensure the changelog is up-to-date:
         ```
         # Check if CHANGELOG.md is updated correctly
         git diff HEAD~ CHANGELOG.md

         # If not updated or needs improvements, make changes
         ${EDITOR:-vi} CHANGELOG.md

         # Commit any additional changes
         git add CHANGELOG.md
         git commit -m "docs: update changelog for feature-name"
         git push
         ```

      9. Clean up after PR merge completion:
         ```
         # First, get back to main and pull latest changes
         cd ~/workspace/${PROJECT_NAME}
         git checkout main
         git pull

         # Remove the worktree
         git worktree remove ../worktrees/${PROJECT_NAME}-feature-name

         # Delete the local branch
         git branch -d feature/name-of-feature

         # Delete the remote branch (once PR is merged and you're done with it)
         git push origin --delete feature/name-of-feature

         # Clean up references
         git fetch --prune
         ```

      ## Troubleshooting IDE Issues with Worktrees

      ### Problem: Cannot edit worktree files from main workspace IDE
      **Solution**: Open a new IDE window directly in the worktree directory
      ```
      cd ../worktrees/${PROJECT_NAME}-feature-name
      cursor .  # or code . for VS Code
      ```

      ### Problem: Files were created/changed in main workspace instead of worktree
      **Solution**:
      ```
      # If no commits were made yet:
      # 1. Copy the files you changed
      # 2. Switch to the worktree
      cd ../worktrees/${PROJECT_NAME}-feature-name
      # 3. Create/paste the files there
      # 4. Discard changes in main workspace
      cd ~/workspace/${PROJECT_NAME}
      git checkout .
      ```

      ### Problem: You accidentally committed changes in main workspace
      **Solution**:
      ```
      # 1. Create a patch from the changes
      cd ~/workspace/${PROJECT_NAME}
      git format-patch HEAD~1

      # 2. Move patch to worktree and apply
      mv 0001-*.patch ../worktrees/${PROJECT_NAME}-feature-name/
      cd ../worktrees/${PROJECT_NAME}-feature-name
      git am 0001-*.patch

      # 3. Reset main workspace
      cd ~/workspace/${PROJECT_NAME}
      git reset --hard HEAD~1
      ```

  - type: reject
    conditions:
      # Discourage direct work on main
      - pattern: "(?i)\\b(work|develop|implement)\\s+.*\\s+(on|in)\\s+main\\b"
        message: "Avoid developing features directly on main. Use feature branches with worktrees instead."
      # Warn about working in main workspace instead of worktree
      - pattern: "(?i)git\\s+status.*feature.*main"
        message: "You appear to be in the main workspace but working on a feature. Use 'cd ../worktrees/${PROJECT_NAME}-feature-name' to work in the worktree."
      # Warn about not using pre-commit in worktree
      - pattern: "(?i)git\\s+commit.*(?!.*pre-commit|make lint).*worktree"
        message: "Make sure to run pre-commit checks before committing in the worktree: nix develop --quiet -c make lint"
      # Warn about creating files for feature work before switching to worktree
      - pattern: "(?i)(touch|echo|create file|new file).*(?!cd\\s+\\.\\./worktrees).*feature"
        message: "Always switch to the feature worktree BEFORE creating any files: cd ../worktrees/${PROJECT_NAME}-feature-name"
      # Warn about not updating CHANGELOG.md in feature PR
      - pattern: "(?i)gh\\s+pr\\s+(create|ready).*(?!.*CHANGELOG\\.md)"
        message: "Make sure to update CHANGELOG.md with your changes before finalizing the PR. Add your changes to the [Unreleased] section."
      # Warn about using Cursor to edit worktree files from main workspace
      - pattern: "(?i)(cursor|code|ide).*\\.\\./worktrees"
        message: "Some IDEs (including Cursor) have limitations editing files outside the main workspace. Open a new IDE window directly in the worktree: cd ../worktrees/${PROJECT_NAME}-feature-name && cursor ."

criteria:
  required:
    - Create feature branches with descriptive names (feature/name-of-feature)
    - Use worktrees with project-prefixed directories to avoid collisions
    - ALWAYS switch to the worktree BEFORE creating or editing any files
    - For IDE usage, open a new window directly in the worktree directory
    - Never attempt to edit worktree files from main workspace IDE window
    - Run direnv allow in the worktree
    - Install and run pre-commit hooks in the worktree using Makefile targets
    - Create minimal PR at beginning of feature work
    - Update CHANGELOG.md with planned changes at PR creation
    - Update CHANGELOG.md with final changes before PR is ready for review
    - Work exclusively in the worktree directory, not the main workspace
    - Run pre-commit checks before committing
    - Keep feature branches focused on single features
    - Clean up worktrees after feature completion
    - Delete both local and remote branches after PR merge
    - Suppress Nix output verbosity with --quiet and redirect stderr to /dev/null

examples:
  - input: "I need to start developing a new feature"
    output: |
      Create a feature branch, worktree, initial PR, and update CHANGELOG.md:
      ```
      # Create the feature branch from main
      git checkout main
      git checkout -b feature/my-new-feature main

      # Setup worktree with project name and SWITCH to it
      PROJECT_NAME=$(basename $(pwd))
      git worktree add ../worktrees/${PROJECT_NAME}-my-new-feature feature/my-new-feature
      cd ../worktrees/${PROJECT_NAME}-my-new-feature

      # Verify you're in the correct branch
      git status

      # Setup development environment
      direnv allow
      nix develop --quiet -c make install-pre-commit 2>/dev/null

      # IMPORTANT: For Cursor/VS Code - open a new window in the worktree directory
      # This must be done from the terminal in the worktree
      cursor .  # For Cursor
      # OR
      code .    # For VS Code

      # Create initial PR (only after switching to worktree)
      touch PLANNED_CHANGES.md
      echo "# Planned Changes\n\n- Add new functionality\n- Update documentation" > PLANNED_CHANGES.md

      # Update CHANGELOG.md with planned changes
      vi CHANGELOG.md
      # Add under [Unreleased]:
      # ### Added
      # - New functionality (WIP)
      # ### Changed
      # - Updated documentation (WIP)

      # Stage both files and commit
      git add PLANNED_CHANGES.md CHANGELOG.md
      git commit -m "feat: initial commit for my-new-feature"
      git push -u origin feature/my-new-feature
      nix develop --quiet -c gh pr create --title "WIP: my-new-feature" --body "Work in progress" --draft 2>/dev/null
      ```

  - input: "How do I use Cursor with worktrees?"
    output: |
      When using Cursor with worktrees:

      1. **IMPORTANT**: Cursor has limitations editing files outside its main workspace. Follow these steps:

      ```
      # First, navigate to your worktree in the terminal
      cd ../worktrees/vibectl-my-feature

      # Then open a new Cursor window directly in the worktree
      cursor .
      ```

      2. **Keep separate Cursor windows**:
         - One for your main workspace
         - Another for your worktree

      3. **Never try to edit worktree files from your main workspace Cursor window**

      4. If you accidentally make changes in main instead of worktree:
      ```
      # If no commits yet:
      # 1. Copy the files you changed
      # 2. Switch to worktree and paste them
      cd ../worktrees/vibectl-my-feature
      # 3. Discard changes in main
      cd ~/workspace/vibectl
      git checkout .

      # If already committed:
      # 1. Create a patch
      cd ~/workspace/vibectl
      git format-patch HEAD~1
      # 2. Apply in worktree
      mv 0001-*.patch ../worktrees/vibectl-my-feature/
      cd ../worktrees/vibectl-my-feature
      git am 0001-*.patch
      # 3. Reset main
      cd ~/workspace/vibectl
      git reset --hard HEAD~1
      ```

  - input: "How do I deal with accidentally committing to main instead of worktree?"
    output: |
      If you accidentally committed changes in main workspace instead of worktree:

      ```
      # 1. Create a patch from your changes in main
      cd ~/workspace/vibectl
      git format-patch HEAD~1

      # 2. Move the patch to your worktree and apply it
      mv 0001-*.patch ../worktrees/vibectl-my-feature/
      cd ../worktrees/vibectl-my-feature
      git am 0001-*.patch

      # 3. Reset main workspace back to the proper state
      cd ~/workspace/vibectl
      git reset --hard HEAD~1

      # 4. Verify everything is correct
      # In main:
      cd ~/workspace/vibectl
      git status  # Should be clean

      # In worktree:
      cd ../worktrees/vibectl-my-feature
      git status  # Should show your feature branch with the changes
      ```

      For multiple commits, create patch series:
      ```
      # Create patches for last N commits
      cd ~/workspace/vibectl
      git format-patch HEAD~N

      # Apply the series in worktree
      mv 0001-*.patch ../worktrees/vibectl-my-feature/
      cd ../worktrees/vibectl-my-feature
      git am 0001-*.patch

      # Reset main (be careful with this!)
      cd ~/workspace/vibectl
      git reset --hard HEAD~N
      ```

metadata:
  priority: high
  version: 1.8
</rule>

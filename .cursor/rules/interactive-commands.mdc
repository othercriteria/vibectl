---
description: Preventing interactive command usage
globs: ["**/*.py", "**/*.sh"]
alwaysApply: true
---
# No Interactive Commands

Prevents usage of interactive and blocking commands that interrupt the AI assistant workflow.

<rule>
name: no_interactive_commands
description: Prevents usage of interactive or blocking terminal commands that the assistant cannot interact with

filters:
  # Match terminal command patterns
  - type: content
    pattern: "(?i)\\b(run_terminal_cmd|terminal|cmd|command|bash|sh|zsh)\\b"
  # Match common interactive tools
  - type: content
    pattern: "(?i)\\b(git|less|more|head|tail|watch|top|htop|vim|nano|emacs|vi|cat|docker|docker-compose|docker\\s+compose)\\b"
  # Match run intentions
  - type: intent
    pattern: "command_execution"
  # Match potentially interactive CLI applications
  - type: content
    pattern: "(?i)\\b(interactive\\s+(shell|command|mode)|--interactive|cli\\s+app|terminal\\s+ui)\\b"
  # Match Python commands that could be interactive
  - type: content
    pattern: "(?i)python\\s+-c\\s+.*(main|cli|app).*\\b(input|prompt|interactive)\\b"

actions:
  - type: guide
    message: |
      When running commands that might be interactive:

      1. For standard commands (less, git, etc.):
         - Append ` | cat` to any command that might start a pager
         - Use `--no-pager` flag with git when possible
           - IMPORTANT: Place `--no-pager` right after `git` and before the subcommand
           - Correct: `git --no-pager log`
           - Incorrect: `git log --no-pager`
         - Prefer non-interactive flags where available (e.g., `--yes`, `-y`, `--non-interactive`)

      2. For CLI applications:
         - Look for command-line flags that suppress interactive behavior
         - Pipe input to commands that require it (`echo 'y' | command`)
         - Use background mode for long-running interactive processes
         - For testing focus on unit tests rather than running interactive commands
         - Use mocks and fixtures in tests instead of running real commands

  - type: reject
    conditions:
      - pattern: "(?i)\\b(less|more|vi|vim|emacs|nano)\\b(?!.*\\s+\\|\\s+cat)"
        message: |
          This command launches an interactive pager or editor.
          Use with `| cat` for pagers, or consider alternatives.

      - pattern: "(?i)\\b(watch|top|htop)\\b"
        message: |
          This command is a continuous, interactive display tool.
          Try a non-interactive alternative.

      # Updated pattern to match any git command that might use a pager
      - pattern: "(?i)\\bgit\\s+(?!--no-pager)(?!.*\\s+\\|\\s+cat)\\b(log|diff|blame|show|status|branch|tag|remote|stash|reflog)"
        message: |
          Git commands may open an interactive pager.
          Use with `--no-pager` flag (placed right after 'git') or pipe to cat.
          Example: `git --no-pager log` NOT `git log --no-pager`

      - pattern: "(?i)python\\s+-c\\s+.*\\b(input|prompt|interactive)\\b"
        message: |
          This Python command appears to be interactive. For testing purposes,
          use pytest with mocks instead of direct execution.

      - pattern: "(?i)\\b(command|app|tool)\\s+with\\s+interactive"
        message: |
          Commands with interactive prompts cannot be automated effectively.
          Use non-interactive alternatives or unit tests with mocks.

examples:
  - input: "Run git log to see recent commits"
    output: "git --no-pager log or git log | cat"

  - input: "Let's run git diff to see changes"
    output: "git --no-pager diff (not git diff --no-pager)"

  - input: "Let's debug this with watch kubectl get pods"
    output: "Instead of 'watch', try: kubectl get pods; sleep 5; kubectl get pods"

  - input: "Let's run our CLI app to test it"
    output: "Instead of running the CLI app directly (which may be interactive), use pytest to run unit tests: pytest -xvs tests/test_cli.py"

  - input: "Can you execute python -c 'from app.cli import main; main()'"
    output: "That command might be interactive. For testing, use unit tests instead: pytest -xvs tests/test_cli.py"

  - input: "How can we test the user interface of our interactive mode?"
    output: "To test the UI of interactive mode, write unit tests that mock the interactive components. Look at your test files for examples of how to mock console input and test the interactive functionality."

criteria:
  required:
    - Use non-interactive alternatives when available
    - Add appropriate flags to prevent interactive behavior
    - Pipe output through cat when necessary to avoid pagers
    - For unavoidably interactive commands, suggest tests instead
    - For services that would block indefinitely, either detach or let user run them
    - Use edit_file tool rather than terminal-based editors
    - Place `--no-pager` flag immediately after `git` and before any subcommand

metadata:
  priority: critical
  version: 2.1
</rule>

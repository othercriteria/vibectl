---
description: Defines criteria and behavior for autonomous commits
globs: ["**/*"]
alwaysApply: true
---

# Autonomous Commits

This rule defines when and how to autonomously commit changes to the repository.

<rule>
name: autonomous_commits
description: Defines criteria and behavior for autonomous commits
filters:
  - type: intent
    pattern: "code_change_complete"
  - type: content
    pattern: "(?i)\\b(commit|save|checkpoint|approved|lgtm|looks good)\\b"
  # Match attempts to disable pre-commit hooks
  - type: content
    pattern: "(?i)\\b(skip|disable|bypass|no|ignore)[-_]?(pre[-_]?commit|hooks?)\\b"

actions:
  - type: commit
    command: |
      # Check for untracked .mdc files in .cursor/rules
      UNTRACKED_RULES=$(git ls-files --others --exclude-standard .cursor/rules/*.mdc)
      if [ -n "$UNTRACKED_RULES" ]; then
        echo "Error: Found untracked rule files:"
        echo "$UNTRACKED_RULES"
        echo "Please add these files to git before committing."
        exit 1
      fi

      # Check if STRUCTURE.md needs updating
      CHANGED_FILES=$(git diff --cached --name-only)
      NEEDS_STRUCTURE_UPDATE=false

      # Check for structural changes that would require STRUCTURE.md updates
      echo "$CHANGED_FILES" | grep -qE '^(\.cursor/rules/.*\.mdc|.*\.py|pyproject\.toml|Makefile|flake\.nix)$' && NEEDS_STRUCTURE_UPDATE=true

      # If structural changes detected but STRUCTURE.md not modified
      if [ "$NEEDS_STRUCTURE_UPDATE" = true ] && ! echo "$CHANGED_FILES" | grep -q '^STRUCTURE\.md$'; then
        echo "Error: Structural changes detected but STRUCTURE.md not updated."
        echo "Please review and update STRUCTURE.md to reflect the changes."
        exit 1
      fi

      # Process commit message parts preserving actual newlines
      # Split multiline inputs into separate -m arguments
      create_m_args() {
        local input="$1"
        local args=""

        # Skip if empty or "None"
        if [[ -z "$input" || "$input" == "None" ]]; then
          echo ""
          return
        fi

        # Create a temporary file for line-by-line processing
        local tmpfile=$(mktemp)
        echo "$input" > "$tmpfile"

        # Read line by line and create -m arguments
        while IFS= read -r line; do
          args="$args -m \"$line\""
        done < "$tmpfile"

        rm "$tmpfile"
        echo "$args"
      }

      # Create -m arguments for each section
      CONCISE_ARG="-m \"{type}: {concise description}\""
      DESCRIPTION_ARGS=$(create_m_args "{detailed description if needed}")

      # Add empty line before breaking changes if they exist
      if [[ -n "{breaking changes if any}" && "{breaking changes if any}" != "None" ]]; then
        BREAKING_HEADER="-m \"\" -m \"Breaking Changes:\""
        BREAKING_ARGS=$(create_m_args "{breaking changes if any}")
      else
        BREAKING_HEADER=""
        BREAKING_ARGS=""
      fi

      # Add empty line before related issues if they exist
      if [[ -n "{related issues/tickets}" && "{related issues/tickets}" != "None" ]]; then
        ISSUES_HEADER="-m \"\" -m \"Related Issues:\""
        ISSUES_ARGS=$(create_m_args "{related issues/tickets}")
      else
        ISSUES_HEADER=""
        ISSUES_ARGS=""
      fi

      # Construct the final git commit command with all arguments
      eval git commit $CONCISE_ARG $DESCRIPTION_ARGS $BREAKING_HEADER $BREAKING_ARGS $ISSUES_HEADER $ISSUES_ARGS

  - type: reject
    conditions:
      - pattern: "(?i)\\b(skip|disable|bypass|no|ignore)[-_]?(pre[-_]?commit|hooks?)\\b"
        message: |
          Disabling pre-commit hooks is not allowed. These hooks ensure code quality and consistency.
          If you're encountering issues with pre-commit hooks:
          1. Fix the issues reported by the hooks
          2. If the fixes are non-trivial or unclear, ask the user for guidance
          3. NEVER bypass the hooks by disabling them

criteria:
  required:
    - All tests pass (both unit and integration if applicable)
    - Pre-commit checks pass (NEVER disable or bypass these)
    - Changes are logically complete
    - Documentation is updated if needed
    - STRUCTURE.md is up-to-date with any structural changes
    - All Cursor rule files (.mdc) are tracked in git
    - No debug/temporary code remains
    - All linting and formatting issues are resolved
  optional:
    - Minor formatting or style fixes can be bundled with functional changes
    - Small related improvements can be included

commit_message_format: |
  {type}: {concise description}

  {detailed description if needed}

  Breaking Changes:
  {breaking changes if any}

  Related Issues: {related issues/tickets}

types:
  - feat: New feature
  - fix: Bug fix
  - refactor: Code restructuring
  - docs: Documentation updates
  - test: Test additions/updates
  - chore: Maintenance tasks

examples:
  - input: "Added new config validation with tests"
    output: |
      git commit \
        -m "feat: add config validation with comprehensive tests" \
        -m "Add YAML schema validation, type checking, unit tests for edge cases, updated docs"

  - input: "Fixed YAML parsing error handling with breaking changes"
    output: |
      git commit \
        -m "fix: improve YAML parsing error handling" \
        -m "Add error catching for YAMLError
Add type validation
Add tests for invalid cases" \
        -m "" \
        -m "Breaking Changes:" \
        -m "- Changed error return type from string to structured Error object" \
        -m "" \
        -m "Related Issues: #456"

  - input: "SKIP=pre-commit git commit -m 'fix: bypass hooks'"
    output: |
      Error: Disabling pre-commit hooks is not allowed.
      Please fix the issues reported by the hooks or ask for guidance.

metadata:
  priority: critical  # Upgraded from high to critical
  version: 1.3  # Version bump for using direct multiple -m arguments approach

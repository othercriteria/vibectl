---
description: Defines criteria and behavior for autonomous commits
globs: ["**/*"]
alwaysApply: true
---

# Autonomous Commits

This rule defines when and how to autonomously commit changes to the repository.

<rule>
name: autonomous_commits
description: Defines criteria and behavior for autonomous commits
filters:
  - type: intent
    pattern: "code_change_complete"
  - type: content
    pattern: "(?i)\\b(commit|save|checkpoint|approved|lgtm|looks good)\\b"

actions:
  - type: commit
    command: |
      git commit \
        -m "{type}: {concise description}" \
        -m "{detailed description if needed}" \
        -m "" \
        -m "Breaking Changes:" \
        -m "{breaking changes if any}" \
        -m "" \
        -m "Related Issues: {related issues/tickets}"

criteria:
  required:
    - All tests pass (both unit and integration if applicable)
    - Pre-commit checks pass
    - Changes are logically complete
    - Documentation is updated if needed
    - No debug/temporary code remains
  optional:
    - Minor formatting or style fixes can be bundled with functional changes
    - Small related improvements can be included

commit_message_format: |
  {type}: {concise description}

  {detailed description if needed}

  Breaking Changes:
  {breaking changes if any}

  Related Issues: {related issues/tickets}

types:
  - feat: New feature
  - fix: Bug fix
  - refactor: Code restructuring
  - docs: Documentation updates
  - test: Test additions/updates
  - chore: Maintenance tasks

examples:
  - input: "Added new config validation with tests"
    output: |
      git commit \
        -m "feat: add config validation with comprehensive tests" \
        -m "Add YAML schema validation, type checking, unit tests for edge cases, updated docs" \
        -m "" \
        -m "Breaking Changes:" \
        -m "None" \
        -m "" \
        -m "Related Issues: #123"
  - input: "Fixed YAML parsing error handling"
    output: |
      git commit \
        -m "fix: improve YAML parsing error handling" \
        -m "Add error catching for YAMLError, type validation, tests for invalid cases" \
        -m "" \
        -m "Breaking Changes:" \
        -m "None" \
        -m "" \
        -m "Related Issues: #456"

metadata:
  priority: high
  version: 1.0

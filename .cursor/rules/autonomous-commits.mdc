---
description: Defines criteria and behavior for autonomous commits
globs: ["**/*"]
alwaysApply: true
---

# Autonomous Commits

This rule defines when and how to autonomously commit changes to the repository.

<rule>
name: autonomous_commits
description: Defines criteria and behavior for autonomous commits
filters:
  - type: intent
    pattern: "code_change_complete"
  - type: content
    pattern: "(?i)\\b(commit|save|checkpoint|approved|lgtm|looks good)\\b"
  # Match attempts to disable pre-commit hooks
  - type: content
    pattern: "(?i)\\b(skip|disable|bypass|no|ignore)[-_]?(pre[-_]?commit|hooks?)\\b"

actions:
  - type: commit
    command: |
      # Process all parts to handle newlines
      DESCRIPTION=$(echo -e "{detailed description if needed}")
      CONCISE=$(echo -e "{type}: {concise description}")

      # Only add breaking changes section if there are breaking changes
      if [ -n "{breaking changes if any}" ] && [ "{breaking changes if any}" != "None" ]; then
        BREAKING_CHANGES_TEXT=$(echo -e "{breaking changes if any}")
        BREAKING_CHANGES="-m \"\" -m \"Breaking Changes:\" -m \"$BREAKING_CHANGES_TEXT\""
      else
        BREAKING_CHANGES=""
      fi

      # Only add related issues section if there are related issues
      if [ -n "{related issues/tickets}" ] && [ "{related issues/tickets}" != "None" ]; then
        RELATED_ISSUES_TEXT=$(echo -e "{related issues/tickets}")
        RELATED_ISSUES="-m \"\" -m \"Related Issues: $RELATED_ISSUES_TEXT\""
      else
        RELATED_ISSUES=""
      fi

      git commit \
        -m "$CONCISE" \
        -m "$DESCRIPTION" \
        $BREAKING_CHANGES \
        $RELATED_ISSUES

  - type: reject
    conditions:
      - pattern: "(?i)\\b(skip|disable|bypass|no|ignore)[-_]?(pre[-_]?commit|hooks?)\\b"
        message: |
          Disabling pre-commit hooks is not allowed. These hooks ensure code quality and consistency.
          If you're encountering issues with pre-commit hooks:
          1. Fix the issues reported by the hooks
          2. If the fixes are non-trivial or unclear, ask the user for guidance
          3. NEVER bypass the hooks by disabling them

criteria:
  required:
    - All tests pass (both unit and integration if applicable)
    - Pre-commit checks pass (NEVER disable or bypass these)
    - Changes are logically complete
    - Documentation is updated if needed
    - No debug/temporary code remains
    - All linting and formatting issues are resolved
  optional:
    - Minor formatting or style fixes can be bundled with functional changes
    - Small related improvements can be included

commit_message_format: |
  {type}: {concise description}

  {detailed description if needed}

  Breaking Changes:
  {breaking changes if any}

  Related Issues: {related issues/tickets}

types:
  - feat: New feature
  - fix: Bug fix
  - refactor: Code restructuring
  - docs: Documentation updates
  - test: Test additions/updates
  - chore: Maintenance tasks

examples:
  - input: "Added new config validation with tests"
    output: |
      git commit \
        -m "feat: add config validation with comprehensive tests" \
        -m "Add YAML schema validation, type checking, unit tests for edge cases, updated docs"

  - input: "Fixed YAML parsing error handling with breaking changes"
    output: |
      git commit \
        -m "fix: improve YAML parsing error handling" \
        -m "Add error catching for YAMLError\nAdd type validation\nAdd tests for invalid cases" \
        -m "" \
        -m "Breaking Changes:" \
        -m "- Changed error return type from string to structured Error object" \
        -m "" \
        -m "Related Issues: #456"

  - input: "SKIP=pre-commit git commit -m 'fix: bypass hooks'"
    output: |
      Error: Disabling pre-commit hooks is not allowed.
      Please fix the issues reported by the hooks or ask for guidance.

metadata:
  priority: critical  # Upgraded from high to critical
  version: 1.1  # Version bump for the new pre-commit hooks policy

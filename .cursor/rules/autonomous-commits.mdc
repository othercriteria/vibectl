---
description: Defines criteria and behavior for autonomous commits
globs: ["**/*"]
alwaysApply: true
---
# Autonomous Commits

Rules for autonomous commits in the repository.

<rule>
name: autonomous_commits
description: Defines criteria and behavior for autonomous commits
filters:
  # Match commit intents earlier in the process
  - type: intent
    pattern: "code_change"
  - type: content
    pattern: "(?i)\\b(commit|save|checkpoint|approved|lgtm|looks good)\\b"
  - type: content
    pattern: "(?i)\\b(skip|disable|bypass|no|ignore)[-_]?(pre[-_]?commit|hooks?)\\b"
  # Trigger on git command patterns
  - type: content
    pattern: "(?i)\\bgit\\s+(commit|add)\\b"

actions:
  - type: commit
    command: |
      # Always run git add to stage all intended changes before committing.
      # Pre-commit hooks will run tests and lint checks; commits will be blocked if these fail.
      # Check for untracked .mdc files in .cursor/rules
      UNTRACKED_RULES=$(git ls-files --others --exclude-standard .cursor/rules/*.mdc)
      if [ -n "$UNTRACKED_RULES" ]; then
        echo "Error: Found untracked rule files. Please add them to git first."
        exit 1
      fi

      # Check if STRUCTURE.md needs updating
      CHANGED_FILES=$(git diff --cached --name-only)
      NEEDS_STRUCTURE_UPDATE=false
      echo "$CHANGED_FILES" | grep -qE '^(\.cursor/rules/.*\.mdc|.*\.py|pyproject\.toml|Makefile|flake\.nix)$' && NEEDS_STRUCTURE_UPDATE=true

      if [ "$NEEDS_STRUCTURE_UPDATE" = true ] && ! echo "$CHANGED_FILES" | grep -q '^STRUCTURE\.md$'; then
        echo "Error: Structural changes detected but STRUCTURE.md not updated."
        exit 1
      fi

      # Check if feature changes need CHANGELOG.md updates
      # Look for feature changes (new features, bug fixes) but skip version bumps and changelog updates themselves
      FEATURE_CHANGES=false
      echo "$CHANGED_FILES" | grep -qvE '^(CHANGELOG\.md|bump_version\.py|pyproject\.toml)$' && echo "$CHANGED_FILES" | grep -qE '\.(py|js|ts|jsx|tsx|css|html|md)$' && FEATURE_CHANGES=true

      if [ "$FEATURE_CHANGES" = true ]; then
        if ! echo "$CHANGED_FILES" | grep -q '^CHANGELOG\.md$'; then
          echo "Warning: Feature changes detected but CHANGELOG.md not updated."
          echo "Consider adding your changes to the Unreleased section of CHANGELOG.md"
          echo "See the changelog rule for details."
          # Do not exit, just warn - it is a reminder, not a blocker
        fi
      fi

      # Check for Python files and run coverage test if needed
      if echo "$CHANGED_FILES" | grep -qE '\.py$'; then
        if command -v pytest &> /dev/null && python -c "import pytest_cov" &> /dev/null; then
          echo "Checking test coverage..."
          # Run coverage check using pytest-cov
          if ! python -m pytest --cov; then
            echo "Error: Test coverage check failed."
            echo "Please ensure coverage meets requirements or document exceptions."
            exit 1
          fi

          # Verify all coverage exclusions are documented
          UNDOCUMENTED=$(grep -r "pragma: no cover" --include="*.py" . | grep -v " - ")
          if [ -n "$UNDOCUMENTED" ]; then
            echo "Error: Undocumented coverage exclusions found:"
            echo "$UNDOCUMENTED"
            echo "Add explanation: # pragma: no cover - [reason for exclusion]"
            exit 1
          fi
        else
          echo "Warning: pytest-cov not found. Skipping coverage check."
          echo "Install with: pip install pytest-cov"
        fi
      fi

      # The script below performs additional checks specific to this rule.
      bash .cursor/rules/scripts/autonomous-commit-checks.sh && git commit -m "{type}: {concise description}"

  - type: reject
    conditions:
      - pattern: "(?i)\\b(--no-verify|\\bno-verify\\b)\\b"
        message: |
          WARNING: We strongly discourage using --no-verify to bypass pre-commit hooks.

          If you must use --no-verify for any reason:
          1. Add (wip) to your commit message to indicate it is temporary
          2. Prioritize addressing the hook failures ASAP
          3. Follow up with a clean commit that passes all hooks

          Instead of using --no-verify, try these approaches:
          • For linting issues: run "ruff check --fix filename.py"
          • For trailing whitespace: run "sed -i 's/[ \t]*$//' filename"
          • For long lines: break function calls over multiple lines
          • For test failures: run "pytest -v failing_test.py"

          Remember: --no-verify bypasses all pre-commit hooks including
          important quality checks, so it should be used sparingly.

  - type: suggest
    message: |
      ## Commit Guidelines

      Pre-commit hooks ensure code quality and avoid regressions. For successful commits:

      1. **Always run hooks**
         • Do not use --no-verify to bypass hooks
         • Fix issues reported by hooks before committing

      2. **Resolve common issues**:
         • Line too long (E501): Break statements at logical points
           ```python
           # Instead of:
           result = function(param1, param2, param3, param4)

           # Use:
           result = function(
               param1,
               param2,
               param3,
               param4
           )
           ```

         • Trailing whitespace: Remove with sed
           ```bash
           sed -i 's/[ \t]*$//' filename
           ```

         • Format issues: Use ruff formatters
           ```bash
           ruff check --fix filename.py  # Fix specific issues
           ruff format filename.py       # Format entire file
           ```

         • Failed tests: Debug with verbose pytest
           ```bash
           pytest -v filename_test.py    # Run specific test with details
           pytest -v filename_test.py::test_function  # Run specific test function
           ```

      3. **Required updates**:
         • STRUCTURE.md for structural code changes
         • CHANGELOG.md for user-facing changes
         • Track all .mdc rule files in git

      4. **Quality standards**:
         • 100% test coverage (exceptions must be documented)
         • No debug code in production
         • Clean linting with no warnings
         • Properly formatted code

      5. **Commit message format**:
         • `type: concise description` (< 72 chars)
         • Use imperative mood ("Add feature" not "Added feature")

criteria:
  required:
    - All tests pass
    - Pre-commit checks pass
    - Documentation updated where needed
    - STRUCTURE.md updated for structural changes
    - CHANGELOG.md updated for user-facing changes
    - All .mdc files tracked in git
    - No debug code remains
    - All linting issues resolved
    - Test coverage meets target (100%) or exclusions documented
    - No undocumented "pragma: no cover" directives
    - Commit message follows conventional format

metadata:
  priority: critical
  version: 3.0
</rule>

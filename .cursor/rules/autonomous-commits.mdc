---
description: Defines criteria and behavior for autonomous commits
globs: ["**/*"]
alwaysApply: true
---

# Autonomous Commits

Rules for autonomous commits in the repository.

<rule>
name: autonomous_commits
description: Defines criteria and behavior for autonomous commits
filters:
  - type: intent
    pattern: "code_change_complete"
  - type: content
    pattern: "(?i)\\b(commit|save|checkpoint|approved|lgtm|looks good)\\b"
  - type: content
    pattern: "(?i)\\b(skip|disable|bypass|no|ignore)[-_]?(pre[-_]?commit|hooks?)\\b"

actions:
  - type: commit
    command: |
      # Check for untracked .mdc files in .cursor/rules
      UNTRACKED_RULES=$(git ls-files --others --exclude-standard .cursor/rules/*.mdc)
      if [ -n "$UNTRACKED_RULES" ]; then
        echo "Error: Found untracked rule files. Please add them to git first."
        exit 1
      fi

      # Check if STRUCTURE.md needs updating
      CHANGED_FILES=$(git diff --cached --name-only)
      NEEDS_STRUCTURE_UPDATE=false
      echo "$CHANGED_FILES" | grep -qE '^(\.cursor/rules/.*\.mdc|.*\.py|pyproject\.toml|Makefile|flake\.nix)$' && NEEDS_STRUCTURE_UPDATE=true

      if [ "$NEEDS_STRUCTURE_UPDATE" = true ] && ! echo "$CHANGED_FILES" | grep -q '^STRUCTURE\.md$'; then
        echo "Error: Structural changes detected but STRUCTURE.md not updated."
        exit 1
      fi

      # Check for Python files and run coverage test if needed
      if echo "$CHANGED_FILES" | grep -qE '\.py$'; then
        if command -v pytest &> /dev/null && python -c "import pytest_cov" &> /dev/null; then
          echo "Checking test coverage..."
          # Run coverage check using pytest-cov
          if ! python -m pytest --cov; then
            echo "Error: Test coverage check failed."
            echo "Please ensure coverage meets requirements or document exceptions."
            exit 1
          fi
          
          # Verify all coverage exclusions are documented
          UNDOCUMENTED=$(grep -r "pragma: no cover" --include="*.py" . | grep -v " - ")
          if [ -n "$UNDOCUMENTED" ]; then
            echo "Error: Undocumented coverage exclusions found:"
            echo "$UNDOCUMENTED"
            echo "Add explanation: # pragma: no cover - [reason for exclusion]"
            exit 1
          fi
        else
          echo "Warning: pytest-cov not found. Skipping coverage check."
          echo "Install with: pip install pytest-cov"
        fi
      fi

      # Process commit message parts preserving actual newlines
      # Split multiline inputs into separate -m arguments
      create_m_args() {
        local input="$1"
        local args=""

        # Skip if empty or "None"
        if [[ -z "$input" || "$input" == "None" ]]; then
          echo ""
          return
        fi

        # Create a temporary file for line-by-line processing
        local tmpfile=$(mktemp)
        echo "$input" > "$tmpfile"

        # Read line by line and create -m arguments
        while IFS= read -r line; do
          args="$args -m \"$line\""
        done < "$tmpfile"

        rm "$tmpfile"
        echo "$args"
      }

      # Create -m arguments for each section
      CONCISE_ARG="-m \"{type}: {concise description}\""
      DESCRIPTION_ARGS=$(create_m_args "{detailed description if needed}")

      # Add empty line before breaking changes if they exist
      if [[ -n "{breaking changes if any}" && "{breaking changes if any}" != "None" ]]; then
        BREAKING_HEADER="-m \"\" -m \"Breaking Changes:\""
        BREAKING_ARGS=$(create_m_args "{breaking changes if any}")
      else
        BREAKING_HEADER=""
        BREAKING_ARGS=""
      fi

      # Add empty line before related issues if they exist
      if [[ -n "{related issues/tickets}" && "{related issues/tickets}" != "None" ]]; then
        ISSUES_HEADER="-m \"\" -m \"Related Issues:\""
        ISSUES_ARGS=$(create_m_args "{related issues/tickets}")
      else
        ISSUES_HEADER=""
        ISSUES_ARGS=""
      fi

      # Construct the final git commit command with all arguments
      eval git commit $CONCISE_ARG $DESCRIPTION_ARGS $BREAKING_HEADER $BREAKING_ARGS $ISSUES_HEADER $ISSUES_ARGS

  - type: reject
    conditions:
      - pattern: "(?i)\\b(skip|disable|bypass|no|ignore)[-_]?(pre[-_]?commit|hooks?)\\b"
        message: |
          Disabling pre-commit hooks is not allowed. Fix reported issues or ask for guidance.

criteria:
  required:
    - All tests pass
    - Pre-commit checks pass
    - Documentation updated if needed
    - STRUCTURE.md up-to-date with structural changes
    - All .mdc files tracked in git
    - No debug code remains
    - All linting issues resolved
    - Test coverage meets target (100%) or exclusions documented
    - No undocumented "pragma: no cover" directives

commit_message_format: |
  {type}: {concise description}

  {detailed description if needed}

  Breaking Changes:
  {breaking changes if any}

  Related Issues: {related issues/tickets}

types:
  - feat: New feature
  - fix: Bug fix
  - refactor: Code restructuring
  - docs: Documentation updates
  - test: Test additions/updates
  - chore: Maintenance tasks

examples:
  - input: "Fixed YAML parsing error handling with breaking changes"
    output: |
      git commit \
        -m "fix: improve YAML parsing error handling" \
        -m "Add error catching for YAMLError
Add type validation
Add tests for invalid cases" \
        -m "" \
        -m "Breaking Changes:" \
        -m "- Changed error return type from string to structured Error object" \
        -m "" \
        -m "Related Issues: #456"

metadata:
  priority: critical
  version: 1.5

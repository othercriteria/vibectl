---
description: Enforces DRY principles in test fixtures and promotes fixture reuse
globs: ["**/conftest.py", "**/test_*.py", "**/tests/**/*.py"]
alwaysApply: true
---
# DRY Test Fixtures

Reuse test fixtures and avoid duplication.

<rule>
name: dry_test_fixtures
description: Enforces DRY principles in test fixtures
filters:
  # Match test files and conftest.py
  - type: file_pattern
    pattern: "^(tests?/.*|.*test_.*\\.py|.*/conftest\\.py)$"
  # Match fixture definitions and usage
  - type: content
    pattern: "(?i)\\b(@pytest\\.fixture|@fixture|request\\.getfixturevalue)\\b"

actions:
  - type: suggest
    message: |
      Before creating new fixtures:
      1. Check existing fixtures in conftest.py and related test files
      2. Consider parameterizing existing fixtures
      3. Place shared fixtures in conftest.py
      4. Keep test-specific fixtures in test files
      5. Document fixtures with clear docstrings

  - type: reject
    conditions:
      # Detect potential fixture duplication
      - pattern: "@pytest\\.fixture\\s*(?:\\(.*\\))?\\s*def\\s+([a-zA-Z_][a-zA-Z0-9_]*)"
        message: "Check if similar fixtures exist in conftest.py or related test files"

      # Detect undocumented fixtures
      - pattern: "@pytest\\.fixture[^\"']*\\s*def\\s+[a-zA-Z_][a-zA-Z0-9_]*\\s*\\([^)]*\\)\\s*:"
        message: "All fixtures should have docstrings explaining their purpose and usage"

criteria:
  required:
    - Check existing conftest.py files before creating new fixtures
    - Document all fixtures with clear docstrings
    - Place shared fixtures in appropriate conftest.py
    - Use fixture parametrization when appropriate

examples:
  - input: |
      # Good: Reuse existing fixture with parameters
      @pytest.fixture
      def test_data(request):
          """Provide test data with customizable content."""
          return request.param if hasattr(request, "param") else {"key": "value"}
    output: "Properly reuses fixtures with parametrization"

metadata:
  priority: high
  version: 1.1
</rule>

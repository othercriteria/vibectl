---
description: Monitors and enforces resolution of slow tests to maintain fast test suites
globs: ["tests/**/*.py", "test_*.py"]
alwaysApply: true
---

# Slow Tests Detection and Resolution

Keep tests fast, document when slow.

<rule>
name: slow_tests
description: Monitors and enforces resolution of slow tests
filters:
  # Match test files
  - type: file_pattern
    pattern: "^tests?/.*\\.(py|test\\.py|spec\\.py)$"
  # Match test-related code
  - type: content
    pattern: "(?i)\\b(test|spec|fixture|pytest\\.mark)\\b"

actions:
  - type: reject
    conditions:
      # Detect slow tests without explicit documentation
      - pattern: "def\\s+test_[^\"']*:\\s*(?!\\s*[\"']\\s*Slow\\s+test:)"
        message: |
          Test appears to be slow (>1s) without documentation.
          Add a docstring explaining why this test needs to be slow,
          or mock external calls to speed it up.

  - type: suggest
    message: |
      For slow tests (>1s):
      1. Document reason: """Slow test: Integration test requiring database setup..."""
      2. Check: unmocked external calls, database operations, file I/O
      3. Fix by: mocking dependencies, using in-memory DBs, caching setup
      4. When necessary: add @pytest.mark.slow, document reason
      5. **After any fix to a slow test, autonomously run the test suite with `pytest --durations=20` to confirm the test is no longer slow. Repeat this process until the test duration is acceptable.**

examples:
  - input: |
      # Good: Documented slow test
      @pytest.mark.slow
      def test_data_processing():
          """Slow test: Processing of large dataset with actual file I/O.

          This test takes ~2s due to loading 1GB test dataset."""
          result = process_large_dataset()
          assert result == expected
    output: "Properly documented slow test with explanation"

criteria:
  required:
    - Document reason for any test >1s
    - Mock external dependencies where possible
    - Confirm with `pytest --durations` that test is no longer slow after a fix
    - Repeat test runs after each fix until duration is acceptable
    - Use @pytest.mark.slow only when truly necessary
    - Prefer fast, reliable, and isolated tests

metadata:
  priority: critical  # Critical due to impact on development velocity
  version: 1.2  # Updated for autonomous slow test confirmation

---
description: Defines commit message format and best practices
globs: ["**/*"]
alwaysApply: true
---
# Commit Message Format

Guidelines for creating clear, descriptive commit messages that accurately reflect changes.

<rule>
name: commit_message
description: Defines commit message format and best practices
filters:
  - type: intent
    pattern: "commit_message_preparation"
  - type: content
    pattern: "(?i)\\b(commit|save|checkpoint|message|description)\\b"

actions:
  - type: suggest
    message: |
      ## Commit Message Best Practices

      1. **IMPORTANT: Always check git for actual changes**
         - Use `git diff --staged` to see exactly what's being committed
         - Don't rely only on the chat history or agent's memory
         - Verify all files modified and specific changes made

      2. **Use conventional commit format**:
         ```
         {type}: {concise description}

         {detailed description if needed}

         Breaking Changes:
         {breaking changes if any}

         Related Issues: {related issues/tickets}
         ```

      3. **Select appropriate type**:
         - `feat`: New feature
         - `fix`: Bug fix
         - `refactor`: Code restructuring
         - `docs`: Documentation updates
         - `test`: Test additions/updates
         - `chore`: Maintenance tasks

      4. **Keep descriptions concise and clear**:
         - First line should be under 72 characters
         - Use imperative mood (e.g., "Add feature" not "Added feature")
         - Be specific about what changed and why

  - type: commit
    command: |
      # This script handles the actual commit message formatting and execution.
      # Placeholders from the rule ({type}, {concise description}, etc.)
      # should be passed as arguments to this script by the AI/tool invoking this action.
      bash .cursor/rules/scripts/format-and-commit.sh "{type}" "{concise description}" "{detailed description if needed}" "{breaking changes if any}" "{related issues/tickets}"

  - type: reject
    conditions:
      - pattern: "(?i)commit\\s+message\\s+.*too\\s+(long|lengthy|verbose)"
        message: |
          Keep the first line of commit messages under 72 characters.
          Use the detailed description for additional information.

      - pattern: "(?i)commit\\s+.*without\\s+(explaining|description|reason)"
        message: |
          Provide a clear description of what changes were made and why.
          Always include both what changed and the reason for the change.

criteria:
  required:
    - First line follows format "{type}: {concise description}"
    - First line is under 72 characters
    - Description is in imperative mood ("Add feature" not "Added feature")
    - Breaking changes are clearly marked
    - Related issues are referenced when applicable
    - Changes are verified with git diff before committing

commit_message_format: |
  {type}: {concise description}

  {detailed description if needed}

  Breaking Changes:
  {breaking changes if any}

  Related Issues: {related issues/tickets}

types:
  - feat: New feature
  - fix: Bug fix
  - refactor: Code restructuring
  - docs: Documentation updates
  - test: Test additions/updates
  - chore: Maintenance tasks

examples:
  - input: "Fixed YAML parsing error handling with breaking changes"
    output: |
      # First check what's actually changing
      git diff --staged

      # Confirm the changes match your understanding, then commit:
      git commit \
        -m "fix: improve YAML parsing error handling" \
        -m "Add error catching for YAMLError
      Add type validation
      Add tests for invalid cases" \
        -m "" \
        -m "Breaking Changes:" \
        -m "- Changed error return type from string to structured Error object" \
        -m "" \
        -m "Related Issues: #456"

metadata:
  priority: high
  version: 1.0

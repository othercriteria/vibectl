---
description: Rules for maintaining a comprehensive changelog
globs: ["**/*"]
alwaysApply: true
---
# Changelog Management

Maintain a clear, consistent changelog for tracking and communicating changes.

<rule>
name: changelog_management
description: Rules for maintaining CHANGELOG.md and its integration with version bumping
filters:
  # Match changelog file
  - type: file
    pattern: "CHANGELOG\\.md$"
  # Match version bump script
  - type: file
    pattern: "bump_version\\.py$"
  # Match version-related commands
  - type: content
    pattern: "(?i)\\b(version|bump|release|changelog)\\b"
  # Match commit messages
  - type: content
    pattern: "(?i)\\b(commit|feat|fix|chore|docs|refactor|test|style|perf|ci|build)(?:[:(]|\\b)"
  # Match feature workflow content
  - type: content
    pattern: "(?i)\\b(feature|worktree|branch|pr|merge)\\b"
  # Match feature planning activities
  - type: content
    pattern: "(?i)\\b(new|initial|start|begin|sketch|plan|flesh|idea)\\s+.*\\b(feature|demo|example|change)\\b"
  # Match for intent to plan features
  - type: intent
    pattern: "feature_planning"

actions:
  - type: suggest
    message: |
      ## Changelog Management

      Follow these guidelines for maintaining CHANGELOG.md:

      1. **Structure**: Keep CHANGELOG.md organized with:
         - "Unreleased" section at the top
         - Versions in reverse-chronological order
         - Changes grouped by type (Added, Changed, Fixed, etc.)
         - **Preserve all previous release sections when updating [Unreleased].**

      2. **Integration with version bumping**:
         - After running `bump-version`, update CHANGELOG.md
         - Move changes from "Unreleased" to a new version section
         - Include the version number and release date

      3. **Workflow**:
         - For each PR merged to main, add a bullet point to "Unreleased"
         - Before releasing, review and organize "Unreleased" changes
         - When releasing, move "Unreleased" to new version section
         - Keep entries concise and user-focused

      4. **Change types**:
         - Added: New features
         - Changed: Changes in existing functionality
         - Deprecated: Soon-to-be removed features
         - Removed: Now removed features
         - Fixed: Bug fixes
         - Security: Security fixes

      5. **Integration with feature worktrees**:
         - Update CHANGELOG.md as part of initial feature PR creation
         - Update again with final changes before marking PR as ready
         - See feature-worktrees rule for detailed workflow

      6. **Editing Guidance**:
         - Always insert new items under the [Unreleased] section, immediately after its header and any existing content in that section.
         - Do **not** modify or remove any previous release sections (e.g., [0.3.2], [0.3.1], etc.).
         - If the [Unreleased] section does not exist, create it at the top of the file, above all versioned sections.
         - Never overwrite or truncate the changelog; always preserve the full history.

  - type: reject
    conditions:
      # Ensure version bump includes CHANGELOG update
      - pattern: "bump-version|bump_version\\.py"
        message: |
          Remember to update CHANGELOG.md after bumping the version.
          Move "Unreleased" changes to a new version section with the bumped version number and today's date.

      # Reject commits without changelog updates for user-facing changes
      - pattern: "(?i)\\b(feat|fix)(?:[:(]|\\b)"
        message: |
          Feature or fix changes should be documented in CHANGELOG.md.
          Add a bullet point to the "Unreleased" section.

      # Reject feature PRs without changelog updates
      - pattern: "(?i)\\b(pr|pull request).*(?:feature|feat).*(?:create|ready|review)"
        message: |
          Feature PRs must include CHANGELOG.md updates.
          1. Add planned changes to the "Unreleased" section in the initial PR.
          2. Update with final changes before marking as ready for review.
          See feature-worktrees rule for workflow details.

      # Reject feature planning without proper WIP indicators
      - pattern: "(?i)\\b(new|initial|start|begin|sketch|plan|flesh|idea)\\s+.*\\b(feature|demo|example|change)\\b"
        message: |
          When planning new features, always update CHANGELOG.md with:
          1. Add entries to the "Unreleased" section.
          2. Use "Planned:" prefix for each entry.
          3. Add "(WIP)" suffix to indicate work-in-progress status.

          Example:
          ```markdown
          ## [Unreleased]

          ### Added
          - Planned: New bootstrap demo for easy demonstration of capabilities (WIP)
          ```

      # Reject unreleased changelog entries without proper WIP marking
      - pattern: "## \\[Unreleased\\][\\s\\S]*?### Added[\\s\\S]*?- (?!Planned:)[^\\n]*(?<!\\(WIP\\))[\\s\\S]*?##"
        message: |
          Planned features in the Unreleased section must be marked with:
          1. "Planned:" prefix at the beginning of the entry
          2. "(WIP)" suffix at the end of the entry

          Example:
          ```markdown
          ## [Unreleased]

          ### Added
          - Planned: New feature description (WIP)
          ```

      # Reject edits that add unreleased or planned changes to a released section
      - pattern: "^## \\[\\d+\\.\\d+\\.\\d+\\]"
        message: |
          Do not add planned or unreleased changes to a released version section. Place all new work under the [Unreleased] section.

criteria:
  required:
    - CHANGELOG.md exists in project root
    - "Unreleased" section at the top
    - Versions in descending order (newest first)
    - Changes grouped by type
    - Each version has a release date
    - Changes focus on user impact, not implementation details
    - Each PR to main updates CHANGELOG.md as needed
    - Integration with version bumping process
    - Coordination with feature worktree development workflow
    - **All previous release sections must be preserved when updating [Unreleased].**
    - **New entries must be inserted after the [Unreleased] header and before any subsequent version headers.**
    - **Planned features must be prefixed with "Planned:" and suffixed with "(WIP)"**

examples:
  - input: "How should I update the changelog after merging a PR?"
    output: |
      Update CHANGELOG.md as follows:

      1. Add a bullet point to the "Unreleased" section:
      ```markdown
      ## [Unreleased]

      ### Added
      - New feature description

      ### Fixed
      - Bug fix description
      ```

      2. Group by appropriate change type (Added, Changed, Fixed, etc.)
      3. Focus on user impact, not implementation details
      4. Commit with a message like "docs: update changelog for PR #123"

  - input: "Add a planned feature entry"
    output: |
      ## [Unreleased]

      ### Added
      - Planned: Add basic logging features to vibectl for improved observability and debugging (WIP)

      ## [0.3.2] - 2025-04-15
      ... (existing content preserved) ...

metadata:
  priority: high
  version: 1.2
</rule>
